package com.hue.translator.sql;

import com.vero.common.constant.VeroType;
import com.vero.model.Datasource;
import com.vero.model.Expressible;
import com.vero.model.Expression;
import com.vero.model.filter.FilterNode;
import com.vero.model.report.BlockFilter;
import com.vero.model.report.DataBlock;
import com.vero.model.report.QueryBlock;
import com.vero.server.engine.sql.vdb.VirtualDB;

import java.util.*;

public class SqlEngineContext {
	public class BlockContext {
		private List<SelectItem> _selectItems = new LinkedList<SelectItem>();
		private Map<String, String> _aliases = new HashMap<String, String>();

		public List<SelectItem> getSelectItems() { return _selectItems; }
		public Map<String, String> getAliases() { return _aliases; }
		public void addAlias(String key, String value) { _aliases.put(key, value); }
		public Boolean isWindowFunctionPresent() {
			for (SelectItem selectItem : _selectItems) {
				if (selectItem._isWindowFunction == true) {
					return true;
				}
			}

			return false;
		}
	}
	
	public class SelectItem {
		@Override
        public String toString() {
            return "SelectItem [_id=" + _id + ", _key=" + _key + ", _alias=" + _alias + ", _type=" + _type
                    + ", _originalType=" + _originalType + ", _user=" + _user + ", _isWindowFunction="
                    + _isWindowFunction + "]";
        }
		private Expressible _expressible = null;
        private String _id;
		private String _key = null;
		private String _alias = null;
		private VeroType _type = VeroType.UNKNOWN; // simplified type for deciding group by
		private VeroType _originalType = VeroType.UNKNOWN;
		private Object _user = null;

		// property
		private Boolean _isWindowFunction = false;

		// using Expressible->getRID() as id
		public SelectItem(Expressible exp) { _expressible = exp; }

		public String getId() {
		    if (_expressible == null) {
		        return "0";
		    } else {
		        return _expressible.getRID();
		    }
	    }
		public Expressible getExpressible() { return _expressible; }
		public String getKey() { return _key; }
		public void setKey(String key) { _key = key; }
		public String getAlias() { if (_alias != null) return _alias; else return ""; }
		public void setAlias(String alias) { _alias = alias; }
		public VeroType getType() { return _type; }
		public void setType(VeroType type) {
		    if (_type == VeroType.UNKNOWN) { 
		        _type = type; 
	        } else if (_type == VeroType.DIMENSION) {
	            if (type == VeroType.MEASURE) {
	                // measure can override dimension
	                _type = type;
	            }
	        }
	    }
        public VeroType getOriginalType() { return _originalType; }
        public void setOriginalType(VeroType originalType) { _originalType = originalType; }
		public Object getUser() { return _user; }
		public void setUser(Object user) { _user = user; }

		public Boolean isWindowFunction() { return _isWindowFunction; }
		public Boolean isHidden() { return _id.equals("0"); } // is the select list generated by tool?
		public void setWindowFunction(Boolean isWindowFunction) { _isWindowFunction = isWindowFunction; }
	}

	public class FilterContext {
		private int _nodeCount;
		private int _filterNodeUsageForWhere[] = null;
		private int _filterNodeUsageForHaving[] = null;

		public FilterContext(BlockFilter blockFilter) {
			_nodeCount = blockFilter.getNodeCount();
		}

		public int getNodeCount() { return _nodeCount; }

		public int getUsageCountForWhere(int nodeId) {
			if (_filterNodeUsageForWhere == null) return 0;
			return _filterNodeUsageForWhere[nodeId];
		}

		public void calUsageCountForWhere(BlockFilter filterForWhere) {
			if (_filterNodeUsageForWhere == null) {
				_filterNodeUsageForWhere = new int[_nodeCount+1];
			}

			calUsageCount(filterForWhere, 0);
		}

		public int getUsageCountForHaving(int nodeId) {
			if (_filterNodeUsageForHaving == null) return 0;
			return _filterNodeUsageForHaving[nodeId];
		}

		public void calUsageCountForHaving(BlockFilter blockFilter) {
			if (_filterNodeUsageForHaving == null) {
				_filterNodeUsageForHaving = new int[_nodeCount+1];
			}

			calUsageCount(blockFilter, 1);
		}

		private void calUsageCount(BlockFilter blockFilter, int type) {
			Iterator<FilterNode<Expression>> it = blockFilter.getRoot().iterator();
			int usageCount[];
			if (type == 0) {
				// where
				usageCount = _filterNodeUsageForWhere;
			} else {
				// having
				usageCount = _filterNodeUsageForHaving;
			}

	        while (it.hasNext()) {
	            FilterNode<Expression> curNode = it.next();
	            usageCount[curNode.getSerial()]++;
	        }
		}
	}

	private DataBlock _currentBlock = null;
	private int _blockSerial = -1;
	private VirtualDB _virtualDB = new VirtualDB();
	private Map<String, BlockContext> _blockMap = new HashMap<String, BlockContext>(10);
	private Map<String, FilterContext> _filterMap = new HashMap<String, FilterContext>(5);
	private Map<String, Expressible> _objectMap = null;

	public void setVirtualDB(VirtualDB virtualDB) { _virtualDB = virtualDB; }
	public VirtualDB getVirtualDB() { return _virtualDB; }
	public DataBlock getCurrentDataBlock() { return _currentBlock; }
	public int getBlockSerial() { return _blockSerial; }

	public void enterNewBlock(DataBlock currentBlock) {
	    _currentBlock = currentBlock;
	    _blockSerial++;

        // determine what virtualDB to use, the virtualDB can comes from test or datasource if any
        if (_currentBlock != null) {
            QueryBlock queryBlock = SqlEngineUtils.findSourceBlock(_currentBlock);
            Datasource dataSource = queryBlock.getDatasource();

            if (dataSource != null) {
                _virtualDB = new VirtualDB(dataSource);
            }
        }
        // else, use the already existed virtualDB
	}

	public void resetContext() {
	    _currentBlock = null;
	    _blockSerial = -1;
	    _virtualDB = new VirtualDB();
	    _blockMap.clear();
	    _filterMap.clear();
	    _objectMap = null;
	}

	public BlockContext getBlockContext(String id) {
		if (_blockMap.containsKey(id)) {
			return _blockMap.get(id);
		} else {
			return null;
		}
	}

	public void addBlockContext(String id) {
		if (!_blockMap.containsKey(id)) {
			_blockMap.put(id, new BlockContext());
		}
	}

	public FilterContext getFilterContext(String id) {
		if (_filterMap.containsKey(id)) {
			return _filterMap.get(id);
		} else {
			return null;
		}
	}

	public void addFilterContext(BlockFilter blockFilter) {
		if (!_filterMap.containsKey(blockFilter.getRID())) {
			_filterMap.put(blockFilter.getRID(), new FilterContext(blockFilter));
		}
	}

	public void setObjectMap(Map<String, Expressible> objectMap) { _objectMap = objectMap; }

	public Object findObjectById(String id) { return _objectMap.get(id); }

	public void printContent(String id) {
		if (!_blockMap.containsKey(id)) { return; }

		System.out.println("Block: " + id);
		BlockContext blockContext = _blockMap.get(id);

		System.out.println("Block statistics: ");
		int dimCount = 0;
		int meaCount = 0;
		int unknownCount = 0;
		for (SelectItem selectItem : blockContext.getSelectItems()) {
			if (selectItem.getType() == VeroType.DIMENSION) { dimCount++; }
			else if (selectItem.getType() == VeroType.MEASURE) { meaCount++; }
			else { unknownCount++; }
		}
		System.out.println("# Dimension = " + dimCount + ", # Measure = " + meaCount + ", # Unknown = " + unknownCount);

		System.out.println("Select items:");
		for (SelectItem selectItem : blockContext.getSelectItems()) {
			System.out.println("key = " + selectItem.getKey() + " , alias = " + selectItem.getAlias() +
				" , type = " + selectItem.getType() + " , originalType = " + selectItem.getOriginalType() + " , isWindowFunction = " + selectItem.isWindowFunction() + " , object = " + findObjectById(selectItem.getId()));
		}

		System.out.println("Filter statistics: ");
		for (String key : _filterMap.keySet()) {
			FilterContext filterContext = _filterMap.get(key);

			System.out.println("Filter id: " + key);
			System.out.println("Where usage count: ");
			for (int i=0; i<filterContext.getNodeCount(); i++) {
				int count = filterContext.getUsageCountForWhere(i);
				if (count != 0) { System.out.println("Node id: " + i + ", count: " + count); }
			}

			System.out.println("Having usage count: ");
			for (int i=0; i<filterContext.getNodeCount(); i++) {
				int count = filterContext.getUsageCountForHaving(i);
				if (count != 0) { System.out.println("Node id: " + i + ", count: " + count); }
			}
		}
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("SqlEngineContext==> ").append("\n");
		for (String id : _blockMap.keySet()) {
			sb.append("Block: " + id).append("\n");
			sb.append("Select items:").append("\n");

			BlockContext blockContext = _blockMap.get(id);
			for (SelectItem selectItem : blockContext.getSelectItems()) {
				sb.append("key = " + selectItem.getKey() + " alias = " + selectItem.getAlias()).append("\n");
			}
		}

		return sb.toString();
	}
}
